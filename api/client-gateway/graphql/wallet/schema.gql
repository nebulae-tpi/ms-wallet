
type CommandResponse {
  "Response code"
  code: Int
  "Response message"
  message: String
}
  
enum ClientWalletSpendingStateEnum {
  ALLOWED
  FORBIDDEN
}

"Wallet info"
type ClientPocketWallet {
  "Main pocket"
  main: Float
  "bonus pocket"
  bonus: Float
}

type ClientWalletInfo {
   "Wallet ID"
   _id: ID!
   "Owner fullname"
   fullname: String
   "Owner document ID"
   documentId: String
   "ops: CLIENT | BUSINESS | USER | DRIVER"
   type: String
   "pocket info"
   pockets: ClientPocketWallet!
   "Wallet state"
   spendingState: ClientWalletSpendingStateEnum
   "Minimum amount operation"
   minAmountOperation: Int
   "Business ID"
   businessId: String
}

"Wallet transaction info"
type WalletTransaction {
  "Wallet ID"
  _id: ID!
  "Timestamp where the transaction was created"
  timestamp: BigInt!
  "Transaction type"
  type: String!
  "Transaction concept"
  concept: String!
  "Indicates which was the used pocket"
  pocket: String!
  "Value associated to the transaction"
  amount: Float!
  "User that performs the operation that create the transaction"
  user: String!  
  "Notes"
  notes: String
}


type Query {
  ClientWallet: ClientWalletInfo @requireAuth
  "request client wallet"
  WalletTransactionHistory(year: Int!, month: Int!, page: Int!, count: Int!): [WalletTransaction]  @requireAuth
}

# type Mutation {

# }

type Subscription {
  ClientWalletUpdates: ClientWalletInfo
}

